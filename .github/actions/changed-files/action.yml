name: "Changed Files"
description: "Get a list of files changed in a PR or push, optionally filtered by a pattern"
inputs:
  pattern:
    description: "Regex pattern to filter changed files"
    required: false
    default: ""
outputs:
  files:
    description: "Space-separated list of changed files"
    value: ${{ steps.get-changed.outputs.files }}
runs:
  using: "composite"
  steps:
    - name: Get changed files
      id: get-changed
      shell: bash
      run: |
        if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          BASE_REF="${{ github.base_ref }}"
          HEAD_REF="${{ github.pull_request.head.ref }}"
          echo "[Info] PR detected, base ref: $BASE_REF, head ref: $HEAD_REF"

          # Fetch both base and head branches
          git fetch origin "$BASE_REF" "$HEAD_REF" || {
            echo "[Error] Failed to fetch origin/$BASE_REF or origin/$HEAD_REF"
            echo "files=" >> $GITHUB_OUTPUT
            exit 0
          }

          # Try to get changed files using explicit PR head reference
          FILES=$(git diff --name-only "origin/$BASE_REF...origin/$HEAD_REF" 2>/dev/null || echo "")

          if [[ -z "$FILES" ]]; then
            echo "[Warning] No merge base found between origin/$BASE_REF and origin/$HEAD_REF"
            echo "[Info] Trying alternative approach using git log..."

            # Fallback: get files changed in commits not in base branch
            FILES=$(git log --name-only --pretty=format: "origin/$BASE_REF..origin/$HEAD_REF" 2>/dev/null | grep -v "^$" | sort -u || echo "")

            if [[ -z "$FILES" ]]; then
              echo "[Warning] Alternative approach also failed, using empty file list"
              FILES=""
            fi
          fi
        else
          echo "[Info] Push event detected"
          FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "")
        fi

        if [[ -n "${{ inputs.pattern }}" ]]; then
          echo "[Info] Filtering files with pattern: ${{ inputs.pattern }}"
          FILES=$(echo "$FILES" | grep -E "${{ inputs.pattern }}" || true)
        fi

        # Output as space-separated list
        FILES=$(echo "$FILES" | xargs)
        echo "[Info] Changed files: $FILES"
        echo "files=$FILES" >> $GITHUB_OUTPUT
