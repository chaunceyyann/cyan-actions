name: 'Changed Files'
description: 'Get a list of changed files matching a pattern'
inputs:
  pattern:
    description: 'Pattern to match changed files (newline-separated for multiple patterns)'
    required: true
outputs:
  files:
    description: 'List of changed files matching the pattern'
    value: ${{ steps.process.outputs.files }}
runs:
  using: 'composite'
  steps:
    - id: process
      run: |
        # Get changed files based on event type
        if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          echo "This is a pull request. Fetching target branch for comparison."
          git fetch origin $GITHUB_BASE_REF --depth=1
          echo "Changed files since merge base with $GITHUB_BASE_REF:"
          CHANGED_FILES=$(git diff --name-only origin/$GITHUB_BASE_REF HEAD)
        elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
          echo "This is a push event. Listing files in the latest commit."
          CHANGED_FILES=$(git show --name-only --pretty="" HEAD)
        else
          echo "Unknown event type: $GITHUB_EVENT_NAME"
          CHANGED_FILES=""
        fi
        
        # Filter changed files based on the provided pattern
        FILTERED_FILES=""
        echo "${{ inputs.pattern }}" | while IFS= read -r PATTERN || [ -n "$PATTERN" ]; do
          if [ -n "$PATTERN" ]; then
            echo "Applying pattern: $PATTERN"
            MATCHED=$(echo "$CHANGED_FILES" | grep -E "$PATTERN" || echo "")
            if [ -n "$MATCHED" ]; then
              FILTERED_FILES="$FILTERED_FILES$MATCHED\n"
            fi
          fi
        done
        
        # Remove duplicates and empty lines, then set output
        FILTERED_FILES=$(echo -e "$FILTERED_FILES" | sort | uniq | grep -v "^$")
        echo "Filtered changed files:"
        echo "$FILTERED_FILES"
        echo "files=$FILTERED_FILES" >> $GITHUB_OUTPUT
      shell: bash 