name: Generate PDF Report

description: |
  Generates a professional PDF report using Python reportlab.
  Creates a well-formatted report with tables, styling, and structured data.

inputs:
  report-title:
    description: 'Title of the report'
    required: false
    default: 'Execution Report'
    type: string
  generated-time:
    description: 'Report generation timestamp'
    required: false
    default: ''
    type: string
  workflow-name:
    description: 'Name of the workflow'
    required: false
    default: ''
    type: string
  run-id:
    description: 'GitHub run ID'
    required: false
    default: ''
    type: string
  pr-number:
    description: 'Pull request number'
    required: false
    default: ''
    type: string
  pr-title:
    description: 'Pull request title'
    required: false
    default: ''
    type: string
  execution-details:
    description: 'JSON string of execution details (key-value pairs)'
    required: false
    default: '{}'
    type: string
  commit-information:
    description: 'JSON string of commit information (key-value pairs)'
    required: false
    default: '{}'
    type: string
  quality-check:
    description: 'JSON string of quality check results (key-value pairs)'
    required: false
    default: '{}'
    type: string
  pipeline-status:
    description: 'JSON string of pipeline status (key-value pairs)'
    required: false
    default: '{}'
    type: string
  variables:
    description: 'Pipeline variables (JSON string)'
    required: false
    default: ''
    type: string
  output-filename:
    description: 'Output PDF filename (without .pdf extension)'
    required: false
    default: 'report'
    type: string

outputs:
  pdf-path:
    description: 'Path to the generated PDF file'
    value: ${{ steps.generate.outputs.pdf-path }}

runs:
  using: "composite"
  steps:
    - name: Install reportlab
      shell: bash
      run: |
        pip install reportlab

    - name: Generate PDF Report
      id: generate
      shell: bash
      run: |
        # Create Python script to generate PDF
        cat > generate_pdf_report.py << 'EOF'
        from reportlab.lib.pagesizes import A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        from reportlab.lib import colors
        from reportlab.lib.enums import TA_CENTER
        import json
        import os

        def create_pdf_report():
            # Get inputs
            report_title = os.environ.get('REPORT_TITLE', 'Execution Report')
            generated_time = os.environ.get('GENERATED_TIME', '')
            workflow_name = os.environ.get('WORKFLOW_NAME', '')
            run_id = os.environ.get('RUN_ID', '')
            pr_number = os.environ.get('PR_NUMBER', '')
            pr_title = os.environ.get('PR_TITLE', '')
            execution_details = json.loads(os.environ.get('EXECUTION_DETAILS', '{}'))
            commit_information = json.loads(os.environ.get('COMMIT_INFORMATION', '{}'))
            quality_check = json.loads(os.environ.get('QUALITY_CHECK', '{}'))
            pipeline_status = json.loads(os.environ.get('PIPELINE_STATUS', '{}'))
            variables = os.environ.get('VARIABLES', '')
            output_filename = os.environ.get('OUTPUT_FILENAME', 'report')

            # Create PDF document
            filename = f"{output_filename}.pdf"
            doc = SimpleDocTemplate(filename, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)

            # Get styles
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=16,
                spaceAfter=30,
                alignment=TA_CENTER,
                textColor=colors.darkblue
            )
            heading_style = ParagraphStyle(
                'CustomHeading',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=12,
                textColor=colors.darkblue
            )
            normal_style = styles['Normal']

            # Build story
            story = []

            # Title
            story.append(Paragraph(report_title, title_style))
            story.append(Spacer(1, 20))

            # Metadata
            metadata_data = []
            if generated_time:
                metadata_data.append(['Generated', generated_time])
            if workflow_name:
                metadata_data.append(['Workflow', workflow_name])
            if run_id:
                metadata_data.append(['Run ID', run_id])
            if pr_number and pr_title:
                metadata_data.append(['PR', f"#{pr_number} - {pr_title}"])
            elif pr_number:
                metadata_data.append(['PR', f"#{pr_number}"])

            if metadata_data:
                metadata_table = Table(metadata_data, colWidths=[2*inch, 4*inch])
                metadata_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                    ('BACKGROUND', (0, 0), (0, -1), colors.grey),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
                ]))
                story.append(metadata_table)
                story.append(Spacer(1, 20))

            # Execution Details
            if execution_details:
                story.append(Paragraph("Execution Details", heading_style))
                exec_data = [[k, v] for k, v in execution_details.items()]
                exec_table = Table(exec_data, colWidths=[2*inch, 4*inch])
                exec_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                    ('BACKGROUND', (0, 0), (0, -1), colors.grey),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
                ]))
                story.append(exec_table)
                story.append(Spacer(1, 20))

            # Commit Information
            if commit_information:
                story.append(Paragraph("Commit Information", heading_style))
                commit_data = [[k, v] for k, v in commit_information.items()]
                commit_table = Table(commit_data, colWidths=[2*inch, 4*inch])
                commit_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                    ('BACKGROUND', (0, 0), (0, -1), colors.grey),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
                ]))
                story.append(commit_table)
                story.append(Spacer(1, 20))

            # Quality Check
            if quality_check:
                story.append(Paragraph("Quality Check", heading_style))
                quality_data = [[k, v] for k, v in quality_check.items()]
                quality_table = Table(quality_data, colWidths=[2*inch, 4*inch])
                quality_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                    ('BACKGROUND', (0, 0), (0, -1), colors.grey),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
                ]))
                story.append(quality_table)
                story.append(Spacer(1, 20))

            # Pipeline Status
            if pipeline_status:
                story.append(Paragraph("Pipeline Status", heading_style))
                status_data = [[k, v] for k, v in pipeline_status.items()]
                status_table = Table(status_data, colWidths=[2*inch, 4*inch])
                status_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                    ('BACKGROUND', (0, 0), (0, -1), colors.grey),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
                ]))
                story.append(status_table)

            # Add variables if available
            if variables and variables.strip():
                story.append(Spacer(1, 20))
                story.append(Paragraph("Variables", heading_style))
                story.append(Paragraph(f"<pre>{variables}</pre>", normal_style))

            # Build PDF
            doc.build(story)
            print(f"PDF report generated: {filename}")
            return filename

        if __name__ == "__main__":
            create_pdf_report()
        EOF

        # Set environment variables for Python script
        export REPORT_TITLE="${{ inputs.report-title }}"
        export GENERATED_TIME="${{ inputs.generated-time }}"
        export WORKFLOW_NAME="${{ inputs.workflow-name }}"
        export RUN_ID="${{ inputs.run-id }}"
        export PR_NUMBER="${{ inputs.pr-number }}"
        export PR_TITLE="${{ inputs.pr-title }}"
        export EXECUTION_DETAILS="${{ inputs.execution-details }}"
        export COMMIT_INFORMATION="${{ inputs.commit-information }}"
        export QUALITY_CHECK="${{ inputs.quality-check }}"
        export PIPELINE_STATUS="${{ inputs.pipeline-status }}"
        export VARIABLES="${{ inputs.variables }}"
        export OUTPUT_FILENAME="${{ inputs.output-filename }}"

        # Run Python script to generate PDF
        python generate_pdf_report.py

        # Output the PDF path
        echo "pdf-path=${{ inputs.output-filename }}.pdf" >> $GITHUB_OUTPUT
