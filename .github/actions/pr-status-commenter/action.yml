name: "PR Status Commenter"
description: "Automatically post comments on PRs when checks pass or fail"
inputs:
  required-checks:
    description: "Comma-separated list of required checks to monitor"
    required: false
    default: "pre-commit,terraform-lint"
  success-template:
    description: "Success comment template (supports variables: {{checks}}, {{pr_number}}, {{repo}})"
    required: false
    default: |
      ✅ **All PR checks passed successfully!**

      🎉 Great job! All automated checks have completed successfully:
      {{checks}}

      This PR is ready for review! 🚀

      📋 **Check Results:**
      - [View all checks](https://github.com/{{repo}}/pull/{{pr_number}}/checks)

      *This comment was automatically posted by the PR Status Commenter.*
  failure-template:
    description: "Failure comment template (supports variables: {{checks}}, {{pr_number}}, {{repo}})"
    required: false
    default: |
      ❌ **Some PR checks failed**

      Please review the failed checks and fix any issues before requesting a review.

      📋 **Check Results:**
      - [View all checks](https://github.com/{{repo}}/pull/{{pr_number}}/checks)

      *This comment was automatically posted by the PR Status Commenter.*
  prevent-duplicates:
    description: "Prevent duplicate comments (true/false)"
    required: false
    default: "true"
  include-check-links:
    description: "Include links to check results (true/false)"
    required: false
    default: "true"
  bot-name:
    description: "Bot name for comment signatures"
    required: false
    default: "PR Status Commenter"
  check-suite-id:
    description: "Check suite ID to monitor (optional, will auto-detect if not provided)"
    required: false
    default: ""

outputs:
  commented:
    description: "Whether a comment was posted (true/false)"
    value: ${{ steps.comment.outputs.commented }}
  comment-type:
    description: "Type of comment posted (success/failure/none)"
    value: ${{ steps.comment.outputs.comment-type }}
runs:
  using: "composite"
  steps:
    - name: Comment on PR Status
      id: comment
      shell: bash
      run: |
        # Set up environment
        REQUIRED_CHECKS="${{ inputs.required-checks }}"
        SUCCESS_TEMPLATE="${{ inputs.success-template }}"
        FAILURE_TEMPLATE="${{ inputs.failure-template }}"
        PREVENT_DUPLICATES="${{ inputs.prevent-duplicates }}"
        INCLUDE_CHECK_LINKS="${{ inputs.include-check-links }}"
        BOT_NAME="${{ inputs.bot-name }}"

        # Get PR number from context
        PR_NUMBER="${{ github.event.pull_request.number }}"
        REPO="${{ github.repository }}"

        if [[ -z "$PR_NUMBER" ]]; then
          echo "No PR number found, skipping comment"
          echo "commented=false" >> $GITHUB_OUTPUT
          echo "comment-type=none" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Processing PR #$PR_NUMBER"

                        # Get the latest commit SHA from the PR
        echo "Getting latest commit SHA from PR #$PR_NUMBER"
        LATEST_SHA=$(gh api repos/$REPO/pulls/$PR_NUMBER | jq -r '.head.sha')
        echo "Latest commit SHA: $LATEST_SHA"

        # Debug: Show what we're querying
        echo "Querying check runs for:"
        echo "  Repo: $REPO"
        echo "  Latest Commit SHA: $LATEST_SHA"
        echo "  PR Number: $PR_NUMBER"

        # Get check runs for this PR using GitHub CLI
        echo "Running: gh api repos/$REPO/commits/$LATEST_SHA/check-runs"
        CHECK_RUNS=$(gh api repos/$REPO/commits/$LATEST_SHA/check-runs 2>&1)
        echo "API Response: $CHECK_RUNS"

        # If the API call failed, try a different approach
        if [[ "$CHECK_RUNS" == *"Not Found"* ]] || [[ "$CHECK_RUNS" == *"error"* ]]; then
          echo "API call failed, trying alternative approach..."
          # Try getting check runs for the PR instead of the commit
          CHECK_RUNS=$(gh api repos/$REPO/pulls/$PR_NUMBER/checks 2>&1)
          echo "Alternative API Response: $CHECK_RUNS"
        fi

        # If still no data, use empty array
        if [[ "$CHECK_RUNS" == *"Not Found"* ]] || [[ "$CHECK_RUNS" == *"error"* ]] || [[ -z "$CHECK_RUNS" ]]; then
          echo "No check runs found, using empty array"
          CHECK_RUNS='{"check_runs":[]}'
        fi

        # Debug: Show all available check runs
        echo "Final CHECK_RUNS: $CHECK_RUNS"
        echo "Available check runs:"
        echo "$CHECK_RUNS" | jq -r '.check_runs[] | "  - \(.name) (status: \(.status), conclusion: \(.conclusion // "null"))"' 2>/dev/null || echo "  No check runs found or jq not available"

        # Parse required checks
        IFS=',' read -ra REQUIRED_ARRAY <<< "$REQUIRED_CHECKS"

        # Check status of each required check
        ALL_COMPLETED=true
        ALL_SUCCESSFUL=true
        CHECKS_LIST=""

                  for check in "${REQUIRED_ARRAY[@]}"; do
            check=$(echo "$check" | xargs)  # trim whitespace
            echo "Checking for: $check"

                        # Debug: Show what patterns we're looking for
            echo "  Looking for patterns: contains='/$check/', endswith='/$check', contains='$check'"

            # Debug: Show all check run names we're checking against
            echo "  Available check run names:"
            echo "$CHECK_RUNS" | jq -r '.check_runs[] | "    - \(.name)"' 2>/dev/null || echo "    No check runs found"

            # Find matching check runs (check for job name in the full check run name)
            CHECK_STATUS=$(echo "$CHECK_RUNS" | jq -r ".check_runs[] | select(.name | contains(\"/$check/\") or .name | endswith(\"/$check\") or .name | test(\"$check\"; \"i\")) | .status" | head -1)
            CHECK_CONCLUSION=$(echo "$CHECK_RUNS" | jq -r ".check_runs[] | select(.name | contains(\"/$check/\") or .name | endswith(\"/$check\") or .name | test(\"$check\"; \"i\")) | .conclusion" | head -1)
            CHECK_NAME=$(echo "$CHECK_RUNS" | jq -r ".check_runs[] | select(.name | contains(\"/$check/\") or .name | endswith(\"/$check\") or .name | test(\"$check\"; \"i\")) | .name" | head -1)

          if [[ -n "$CHECK_NAME" ]]; then
            if [[ "$CHECK_STATUS" != "completed" ]]; then
              ALL_COMPLETED=false
              echo "Check $CHECK_NAME is not completed (status: $CHECK_STATUS)"
            else
              if [[ "$CHECK_CONCLUSION" == "success" ]]; then
                CHECKS_LIST+="- ✅ $CHECK_NAME"$'\n'
              else
                ALL_SUCCESSFUL=false
                CHECKS_LIST+="- ❌ $CHECK_NAME"$'\n'
              fi
            fi
          else
            echo "No check found matching pattern: $check"
            ALL_COMPLETED=false
          fi
        done

        echo "All completed: $ALL_COMPLETED"
        echo "All successful: $ALL_SUCCESSFUL"

        if [[ "$ALL_COMPLETED" != "true" ]]; then
          echo "Not all checks are completed yet"
          echo "commented=false" >> $GITHUB_OUTPUT
          echo "comment-type=none" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Determine comment type and template
        if [[ "$ALL_SUCCESSFUL" == "true" ]]; then
          COMMENT_TYPE="success"
          TEMPLATE="$SUCCESS_TEMPLATE"
          SEARCH_TEXT="✅ All PR checks passed successfully!"
        else
          COMMENT_TYPE="failure"
          TEMPLATE="$FAILURE_TEMPLATE"
          SEARCH_TEXT="❌ Some PR checks failed"
        fi

        # Check for existing comment if prevent_duplicates is enabled
        SHOULD_POST=true
        if [[ "$PREVENT_DUPLICATES" == "true" ]]; then
          EXISTING_COMMENTS=$(gh api repos/$REPO/issues/$PR_NUMBER/comments 2>/dev/null || echo '[]')

          if echo "$EXISTING_COMMENTS" | jq -e ".[] | select(.user.login == \"github-actions[bot]\" and .body | contains(\"$SEARCH_TEXT\"))" > /dev/null; then
            SHOULD_POST=false
            echo "Duplicate comment found, skipping"
          fi
        fi

        if [[ "$SHOULD_POST" == "true" ]]; then
          # Prepare comment body
          COMMENT_BODY=$(echo "$TEMPLATE" | \
            sed "s/{{checks}}/$CHECKS_LIST/g" | \
            sed "s/{{pr_number}}/$PR_NUMBER/g" | \
            sed "s/{{repo}}/$REPO/g" | \
            sed "s/{{bot_name}}/$BOT_NAME/g")

          # Remove check links section if not enabled
          if [[ "$INCLUDE_CHECK_LINKS" != "true" ]]; then
            COMMENT_BODY=$(echo "$COMMENT_BODY" | sed '/📋 \*\*Check Results:\*\*/,/^\*Automated by/d')
          fi

          # Post comment using GitHub CLI
          echo "$COMMENT_BODY" | gh issue comment $PR_NUMBER --repo $REPO --body-file - > /dev/null 2>&1

          if [[ $? -eq 0 ]]; then
            echo "Posted $COMMENT_TYPE comment on PR #$PR_NUMBER"
            echo "commented=true" >> $GITHUB_OUTPUT
            echo "comment-type=$COMMENT_TYPE" >> $GITHUB_OUTPUT
          else
            echo "Failed to post comment"
            echo "commented=false" >> $GITHUB_OUTPUT
            echo "comment-type=$COMMENT_TYPE" >> $GITHUB_OUTPUT
          fi
        else
          echo "commented=false" >> $GITHUB_OUTPUT
          echo "comment-type=$COMMENT_TYPE" >> $GITHUB_OUTPUT
        fi
