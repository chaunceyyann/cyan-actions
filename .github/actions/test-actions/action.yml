name: "Test Actions"
description: "Test all custom actions in the repository"
inputs:
  fetch-depth:
    description: "Git fetch depth for diff calculation"
    required: false
    default: "0"
    type: string
outputs:
  changed-actions:
    description: "List of changed action files"
    value: ${{ steps.find-changes.outputs.files }}
runs:
  using: "composite"
  steps:
    - name: Checkout with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}

    - name: Find changed action files
      id: find-changes
      uses: ./.github/actions/changed-files
      with:
        pattern: "^\\.github/actions/.*/action\\.yml$"

    - name: Show changed actions
      shell: bash
      run: |
        echo "[Info] Changed action files:"
        echo "${{ steps.find-changes.outputs.files }}"

    - name: Test JavaScript actions
      id: test-js
      shell: bash
      run: |
        echo "[Info] üì¶ Testing JavaScript actions..."

        # Check if any JavaScript actions exist
        js_actions=""
        for action_file in ${{ steps.find-changes.outputs.files }}; do
          if [[ -n "$action_file" && -f "$action_file" ]]; then
            action_type=$(grep -A1 "runs:" "$action_file" | grep "using:" | awk '{print $2}' | tr -d '"')
            if [[ "$action_type" =~ ^node(16|18|20)$ ]]; then
              echo "[Info] Found JavaScript action: $action_file"
              js_actions="$js_actions $action_file"
            fi
          fi
        done

        if [[ -n "$js_actions" ]]; then
          echo "[Info] JavaScript actions to test: $js_actions"
          echo "js_actions_found=true" >> $GITHUB_OUTPUT
          echo "js_actions_list=$js_actions" >> $GITHUB_OUTPUT

          # Install Node.js if needed
          echo "[Info] Installing Node.js..."
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          echo "[Info] Node.js version: $(node --version)"
          echo "[Info] npm version: $(npm --version)"

          # Test each JavaScript action
          for action_file in $js_actions; do
            echo "[Info] Testing JavaScript action: $action_file"
            action_dir=$(dirname "$action_file")

            # Check for package.json
            if [[ -f "$action_dir/package.json" ]]; then
              echo "[Info] ‚úÖ package.json found"

              # Validate package.json syntax
              if node -e "JSON.parse(require('fs').readFileSync('$action_dir/package.json', 'utf8'))" 2>/dev/null; then
                echo "[Info] ‚úÖ package.json syntax is valid"
              else
                echo "[Error] ‚ùå package.json syntax is invalid"
                exit 1
              fi

              # Check for main entry point
              main_file=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$action_dir/package.json', 'utf8')).main || '')" 2>/dev/null)
              if [[ -n "$main_file" && -f "$action_dir/$main_file" ]]; then
                echo "[Info] ‚úÖ Main entry point found: $main_file"
              else
                echo "[Error] ‚ùå Main entry point not found or invalid"
                exit 1
              fi

              # Install dependencies and run tests if they exist
              if grep -q '"test"' "$action_dir/package.json"; then
                echo "[Info] Installing dependencies and running tests..."
                cd "$action_dir"
                npm install
                npm test
              else
                echo "[Info] No tests configured in package.json"
              fi
            else
              echo "[Error] ‚ùå package.json not found in $action_dir"
              exit 1
            fi
          done
        else
          echo "[Info] No JavaScript actions found"
          echo "js_actions_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Test composite actions
      shell: bash
      run: |
        echo "[Info] üîß Testing composite actions..."

        # Find composite actions
        composite_actions=""
        for action_file in ${{ steps.find-changes.outputs.files }}; do
          if [[ -n "$action_file" && -f "$action_file" ]]; then
            action_type=$(grep -A1 "runs:" "$action_file" | grep "using:" | awk '{print $2}' | tr -d '"')
            if [[ "$action_type" == "composite" ]]; then
              echo "[Info] Found composite action: $action_file"
              composite_actions="$composite_actions $action_file"
            fi
          fi
        done

        if [[ -n "$composite_actions" ]]; then
          echo "[Info] Composite actions to test: $composite_actions"
          for action_file in $composite_actions; do
            echo "[Info] Testing composite action: $action_file"

            # Validate YAML structure
            if grep -q "runs:" "$action_file" && grep -q "using:" "$action_file" && grep -q "steps:" "$action_file"; then
              echo "[Info] ‚úÖ Valid composite action structure"
            else
              echo "[Error] ‚ùå Invalid composite action structure"
              exit 1
            fi

            # Test shell scripts in steps
            echo "[Info] Testing shell scripts..."
            grep -A5 "shell:" "$action_file" | grep "run:" | while read -r line; do
              script=$(echo "$line" | sed 's/.*run: //')
              if [[ -n "$script" ]]; then
                echo "[Debug] Validating script: $script"
                # Basic shell syntax check
                if echo "$script" | bash -n 2>/dev/null; then
                  echo "[Info] ‚úÖ Script syntax is valid"
                else
                  echo "[Error] ‚ö†Ô∏è  Script syntax may have issues"
                fi
              fi
            done
          done
        else
          echo "[Info] No composite actions found"
        fi

    - name: Test container actions
      shell: bash
      run: |
        echo "[Info] üê≥ Testing container actions..."

        # Find container actions
        container_actions=""
        for action_file in ${{ steps.find-changes.outputs.files }}; do
          if [[ -n "$action_file" && -f "$action_file" ]]; then
            action_type=$(grep -A1 "runs:" "$action_file" | grep "using:" | awk '{print $2}' | tr -d '"')
            if [[ "$action_type" == "docker" ]]; then
              echo "[Info] Found container action: $action_file"
              container_actions="$container_actions $action_file"
            fi
          fi
        done

        if [[ -n "$container_actions" ]]; then
          echo "[Info] Container actions to test: $container_actions"
          for action_file in $container_actions; do
            echo "[Info] Testing container action: $action_file"

            # Check for Dockerfile
            action_dir=$(dirname "$action_file")
            if [[ -f "$action_dir/Dockerfile" ]]; then
              echo "[Info] ‚úÖ Dockerfile found"
              # Basic Dockerfile validation - check for common syntax issues
              if grep -q "^FROM " "$action_dir/Dockerfile"; then
                echo "[Info] ‚úÖ Dockerfile has valid FROM instruction"
              else
                echo "[Error] ‚ùå Dockerfile missing FROM instruction"
                exit 1
              fi

              # Check for common Dockerfile issues
              if grep -q "COPY\|ADD" "$action_dir/Dockerfile"; then
                echo "[Info] ‚úÖ Dockerfile has file operations"
              else
                echo "[Error] ‚ö†Ô∏è  Dockerfile may be missing file operations"
              fi
            else
              echo "[Error] ‚ùå Dockerfile not found in $action_dir"
              exit 1
            fi
          done
        else
          echo "[Info] No container actions found"
        fi
