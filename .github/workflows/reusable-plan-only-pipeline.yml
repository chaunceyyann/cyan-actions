name: Reusable Plan-Only CodePipeline Trigger

on:
  workflow_call:
    inputs:
      aws-region:
        description: 'AWS region for the pipeline'
        required: false
        default: 'us-west-2'
        type: string
      pipeline-name:
        description: 'Name of the CodePipeline to trigger'
        required: false
        default: 'aft-customization-plan-only'
        type: string
      timeout-minutes:
        description: 'Timeout in minutes for pipeline execution'
        required: false
        default: '30'
        type: string
      patterns:
        description: 'Comma-separated patterns to check for sensitive keywords'
        required: false
        default: 'noodle_king,secret_key,password,api_key,token'
        type: string
      file-patterns:
        description: 'Patterns to match changed files for account mapping'
        required: false
        default: |
          ^src/.*
          ^tests/.*
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

jobs:
  trigger-codepipeline:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ inputs.aws-region }}
    outputs:
      execution-id: ${{ steps.codepipeline.outputs.execution-id }}
      platform: ${{ steps.platform.outputs.aft_account }}
      target-account: ${{ steps.account.outputs.account_number }}
      skip-workflow: ${{ steps.check-mapping.outputs.skip-pipeline }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine platform based on target branch
        id: platform
        run: |
          PLATFORM=$([ "${{ github.ref_name }}" = "master" ] && echo "prod_account_number" || echo "dev_account_number")
          echo "aft_account=$PLATFORM" >> "$GITHUB_OUTPUT"
          echo "Platform: $PLATFORM"

      - name: Find changed files
        id: changes
        uses: chaunceyyann/cyan-actions/.github/actions/changed-files@v0.1
        with:
          pattern: ${{ inputs.file-patterns }}

      - name: Determine account number
        id: account
        uses: chaunceyyann/cyan-actions/.github/actions/account-mapping@v0.1
        with:
          changed-files: ${{ steps.changes.outputs.files }}
          environment: ${{ steps.platform.outputs.aft_account }}

      - name: Check if account mapping found
        id: check-mapping
        run: |
          if [ "${{ steps.account.outputs.mapping-found }}" = "false" ]; then
            echo "No account mapping found for changed files. Skipping entire workflow."
            echo "skip_pipeline=true" >> $GITHUB_OUTPUT
          else
            echo "Account mapping found. Proceeding with pipeline trigger."
            echo "skip_pipeline=false" >> $GITHUB_OUTPUT
          fi

      - name: Call AWS AFT CodePipeline Action
        id: codepipeline
        if: steps.check-mapping.outputs.skip-pipeline != 'true'
        uses: chaunceyyann/cyan-actions/.github/actions/run-codepipeline@v0.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-target-account: ${{ steps.account.outputs.account-number }}
          aws-pipeline-account: ${{ steps.platform.outputs.aft_account }}
          commit-sha: ${{ github.sha }}
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}

  generate-summary:
    runs-on: ubuntu-latest
    needs: trigger-codepipeline
    if: needs.trigger-codepipeline.outputs.skip-workflow != 'true' && needs.trigger-codepipeline.outputs.execution-id != 'null' && needs.trigger-codepipeline.outputs.execution-id != ''
    env:
      AWS_REGION: ${{ inputs.aws-region }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for sensitive keywords
        id: keyword-check
        uses: chaunceyyann/cyan-actions/.github/actions/check-keywords@v0.1
        with:
          patterns: ${{ inputs.patterns }}
          base-ref: "origin/${{ github.base_ref }}"

      - name: Check Pipeline Status
        id: pipeline-status
        uses: chaunceyyann/cyan-actions/.github/actions/check-codepipeline@v0.1
        with:
          execution-id: ${{ needs.trigger-codepipeline.outputs.execution-id }}
          pipeline-name: ${{ inputs.pipeline-name }}
          timeout-minutes: ${{ inputs.timeout-minutes }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get commit information
        id: commit-info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_TIMESTAMP=$(git log -1 --pretty=format:"%aI")

          {
            echo "commit-message=$COMMIT_MSG"
            echo "commit-author=$COMMIT_AUTHOR"
            echo "commit-timestamp=$COMMIT_TIMESTAMP"
          } >> "$GITHUB_OUTPUT"

      - name: Get PR information
        id: pr-info
        env:
          PR_NUMBER: ${{ github.event.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          {
            echo "pr-number=$PR_NUMBER"
            echo "pr-title=$PR_TITLE"
            echo "pr-author=$PR_AUTHOR"
          } >> "$GITHUB_OUTPUT"

      - name: Generate summary
        run: |
          # Format timestamps to US Eastern timezone
          FORMATTED_COMMIT_TIME=$(date -d "${{ steps.commit-info.outputs.commit-timestamp }}" '+%b %d, %Y at %I:%M %p %Z' 2>/dev/null || echo "${{ steps.commit-info.outputs.commit-timestamp }}")
          FORMATTED_START_TIME=$(date -d "${{ steps.pipeline-status.outputs.start-time }}" '+%b %d, %Y at %I:%M %p %Z' 2>/dev/null || echo "${{ steps.pipeline-status.outputs.start-time }}")

          # Determine status styling based on pipeline status
          PIPELINE_STATUS="${{ steps.pipeline-status.outputs.status }}"
          if [ "$PIPELINE_STATUS" = "Succeeded" ]; then
            STATUS_DISPLAY="‚úÖ **$PIPELINE_STATUS** ‚úÖ"
          elif [ "$PIPELINE_STATUS" = "Failed" ]; then
            STATUS_DISPLAY="‚ùå **$PIPELINE_STATUS** ‚ùå"
          elif [ "$PIPELINE_STATUS" = "InProgress" ]; then
            STATUS_DISPLAY="‚è≥ **$PIPELINE_STATUS** ‚è≥"
          elif [ "$PIPELINE_STATUS" = "Stopped" ]; then
            STATUS_DISPLAY="‚èπÔ∏è **$PIPELINE_STATUS** ‚èπÔ∏è"
          else
            STATUS_DISPLAY="üü° **$PIPELINE_STATUS** üü°"
          fi

          # Generate main summary content using cat << EOF
          cat << EOF >> "$GITHUB_STEP_SUMMARY"
          ## CodePipeline Execution Summary

          ### Execution Details
          | **Field**          | **Value**                    |
          |-------------------|------------------------------|
          | Platform          | ${{ needs.trigger-codepipeline.outputs.platform }} |
          | Target Account    | ${{ needs.trigger-codepipeline.outputs.target-account }} |
          | AWS Region        | ${{ env.AWS_REGION }} |

          ### Pull Request
          | **Field**          | **Value**                    |
          |-------------------|------------------------------|
          | PR Number         | #${{ steps.pr-info.outputs.pr-number }} |
          | Title             | ${{ steps.pr-info.outputs.pr-title }} |
          | Author            | ${{ steps.pr-info.outputs.pr-author }} |
          | Link              | [View Pull Request](https://github.com/${{ github.repository }}/pull/${{ steps.pr-info.outputs.pr-number }}) |

          ### Latest Commit
          | **Field**          | **Value**                    |
          |-------------------|------------------------------|
          | SHA               | \`${{ github.sha }}\` |
          | Message           | ${{ steps.commit-info.outputs.commit-message }} |
          | Author            | ${{ steps.commit-info.outputs.commit-author }} |
          | Timestamp         | $FORMATTED_COMMIT_TIME |

          ### Code Quality Check
          | **Field**          | **Value**                    |
          |-------------------|------------------------------|
          | Sensitive Keywords | ${{ steps.keyword-check.outputs.found }} |

          ### Pipeline Status
          | **Field**          | **Value**                    |
          |-------------------|------------------------------|
          | Execution ID      | ${{ needs.trigger-codepipeline.outputs.execution-id }} |
          | Status            | $STATUS_DISPLAY |
          | Start Time        | $FORMATTED_START_TIME |
          EOF
          # Add variables section if available (handled separately due to JSON content)
          if [ -n "${{ steps.pipeline-status.outputs.variables }}" ]; then
            echo "### Pipeline Variables" >> "$GITHUB_STEP_SUMMARY"
            echo '```json' >> "$GITHUB_STEP_SUMMARY"
            echo "${{ steps.pipeline-status.outputs.variables }}" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi

          # Add pipeline console link
          echo "- **Pipeline Console**: [View in AWS Console](https://${{ env.AWS_REGION }}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${{ inputs.pipeline-name }}/executions/${{ needs.trigger-codepipeline.outputs.execution-id }}/view?region=${{ env.AWS_REGION }})" >> "$GITHUB_STEP_SUMMARY"




      - name: Generate PDF report
        id: pdf-report
        uses: chaunceyyann/cyan-actions/.github/actions/generate-pdf-report@v0.1
        with:
          report-title: "CodePipeline Execution Report"
          generated-time: ${{ steps.commit-info.outputs.commit-timestamp }}
          repository: "${{ github.event.repository.name }}"
          pr-number: "${{ github.event.number }}"
          pr-title: "${{ github.event.pull_request.title }}"
          execution-details: '{"Platform": "${{ needs.trigger-codepipeline.outputs.platform }}", "Target Account": "${{ needs.trigger-codepipeline.outputs.target-account }}", "AWS Region": "${{ env.AWS_REGION }}"}'
          commit-information: '{"SHA": "${{ github.sha }}", "Message": "${{ steps.commit-info.outputs.commit-message }}", "Author": "${{ steps.commit-info.outputs.commit-author }}", "Timestamp": "${{ steps.commit-info.outputs.commit-timestamp }}", "Branch": "${{ github.ref_name }}", "Base Ref": "${{ github.base_ref }}"}'
          quality-check: '{"Sensitive Keywords Found": "${{ steps.keyword-check.outputs.found }}", "Patterns Checked": "${{ inputs.patterns }}"}'
          pipeline-status: '{"Execution ID": "${{ needs.trigger-codepipeline.outputs.execution-id }}", "Status": "${{ steps.pipeline-status.outputs.status }}", "Start Time": "${{ steps.pipeline-status.outputs.start-time }}", "Console URL": "https://${{ env.AWS_REGION }}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${{ inputs.pipeline-name }}/executions/${{ needs.trigger-codepipeline.outputs.execution-id }}/view?region=${{ env.AWS_REGION }}"}'
          variables: "${{ steps.pipeline-status.outputs.variables }}"
          output-filename: "pipeline-execution-report-${{ github.run_id }}"

      - name: Upload PDF report
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-execution-report-${{ github.run_id }}
          path: ${{ steps.pdf-report.outputs.pdf-path }}
          retention-days: 30
