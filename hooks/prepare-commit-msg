#!/bin/bash

# Git prepare-commit-msg hook to automatically add JIRA ticket from branch name
# This hook runs before the commit message editor opens

set -e  # Exit on any error

# Configuration - hardcoded for simplicity
JIRA_PATTERNS=(
    '[A-Z]+-[0-9]+'           # Standard: JIRA-123, ABC-456
    '[A-Z]+[0-9]+'            # No dash: ABC123, PROJECT456
    '[A-Z]{2,}-[0-9]+'        # At least 2 letters: AB-123
)
SKIP_COMMIT_TYPES="merge,squash"
SKIP_PREFIXES=("Merge" "Revert" "WIP" "Draft")
JIRA_PREFIX_FORMAT="[{TICKET}] {MESSAGE}"

# Get the commit message file path (first argument)
COMMIT_MSG_FILE=$1
# Get the commit type (second argument)
COMMIT_TYPE=$2
# Get the commit SHA (third argument, if available)
COMMIT_SHA=$3

# Check if we should skip this commit type
if [ -n "$SKIP_COMMIT_TYPES" ]; then
    IFS=',' read -ra SKIP_TYPES <<< "$SKIP_COMMIT_TYPES"
    for skip_type in "${SKIP_TYPES[@]}"; do
        if [ "$COMMIT_TYPE" = "$skip_type" ]; then
            exit 0
        fi
    done
fi

# Skip if this is a merge commit or rebase
if [ "$COMMIT_TYPE" = "merge" ] || [ "$COMMIT_TYPE" = "squash" ] || [ "$COMMIT_TYPE" = "commit" ]; then
    # Check if this is a merge commit by looking at the message
    if grep -q "^Merge" "$COMMIT_MSG_FILE" 2>/dev/null; then
        exit 0
    fi
fi

# Read the current commit message
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Check if commit message starts with any skip prefixes
for prefix in "${SKIP_PREFIXES[@]}"; do
    if [[ "$COMMIT_MSG" =~ ^"$prefix" ]]; then
        exit 0
    fi
done

# Extract JIRA ticket from current branch name
BRANCH_NAME=$(git branch --show-current)
JIRA_TICKET=""

# Try each pattern to find a JIRA ticket
for pattern in "${JIRA_PATTERNS[@]}"; do
    JIRA_TICKET=$(echo "$BRANCH_NAME" | grep -oE "$pattern" | head -1)
    if [ -n "$JIRA_TICKET" ]; then
        break
    fi
done

# If no JIRA ticket found in branch name, try to extract from branch name patterns
if [ -z "$JIRA_TICKET" ]; then
    # Try patterns like: feature/ABC-123-description, bugfix/PROJECT-456-fix
    for pattern in "${JIRA_PATTERNS[@]}"; do
        JIRA_TICKET=$(echo "$BRANCH_NAME" | grep -oE "$pattern" | head -1)
        if [ -n "$JIRA_TICKET" ]; then
            break
        fi
    done
fi

# Convert patterns without dash to include dash (ABC123 -> ABC-123)
if [ -n "$JIRA_TICKET" ] && [[ "$JIRA_TICKET" =~ ^[A-Z]+[0-9]+$ ]]; then
    JIRA_TICKET=$(echo "$JIRA_TICKET" | sed 's/\([A-Z]*\)\([0-9]*\)/\1-\2/')
fi

# If we found a JIRA ticket, check if it's already in the commit message
if [ -n "$JIRA_TICKET" ]; then
    # Check if JIRA ticket is already present in the commit message
    if ! echo "$COMMIT_MSG" | grep -q "$JIRA_TICKET"; then
        # Use the configured format to add JIRA ticket to the commit message
        NEW_MSG=$(echo "$JIRA_PREFIX_FORMAT" | sed "s/{TICKET}/$JIRA_TICKET/g" | sed "s/{MESSAGE}/$COMMIT_MSG/g")
        echo "$NEW_MSG" > "$COMMIT_MSG_FILE"
        echo "âœ… Added JIRA ticket [$JIRA_TICKET] to commit message from branch: $BRANCH_NAME"
    fi
fi
