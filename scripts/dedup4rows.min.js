javascript:(function(){const DRY_RUN=true;const rows=Array.from(document.querySelectorAll('tr'));let rowsWithRemovals=0,cellsRemoved=0,rowsScanned=0;function safeGroupCollapsed(t){try{console.groupCollapsed(t)}catch(e){console.log(t)}}function safeGroupEnd(){try{console.groupEnd()}catch(e){}}for(let ri=0;ri<rows.length;ri++){const tr=rows[ri];rowsScanned++;safeGroupCollapsed('Row '+(ri+1));let cells=Array.from(tr.querySelectorAll(':scope > td, :scope > th'));console.log('Found '+cells.length+' cell(s) in this row.');if(cells.length<=1){console.log('Skipping: row has <= 1 cell.');safeGroupEnd();continue}const seen=new Set();let removedInRow=0;for(let ci=0;ci<cells.length;ci++){const cell=cells[ci];const classArray=Array.from(cell.classList).map(s=>s.trim()).filter(Boolean);const key=classArray.length?classArray.sort().join(' '):'__NO_CLASSES__';console.log('Cell '+(ci+1)+': classes=['+classArray.join(',')+'], key="'+key+'"');if(classArray.length===0){console.log('  -> No classes on this cell — skipping (not considered duplicate-by-class).');continue}if(seen.has(key)){console.log('  -> Duplicate key detected. MARKED for '+(DRY_RUN?'outline (dry-run)':'removal')+'.');try{cell.style.outline='3px dashed red'}catch(e){}if(!DRY_RUN){try{cell.remove();removedInRow++;cellsRemoved++;console.log('  -> Removed.')}catch(err){console.error('  -> Failed to remove cell:',err)}}}else{seen.add(key);console.log('  -> First occurrence, keeping.')}}if(removedInRow>0)rowsWithRemovals++;safeGroupEnd()}console.log('✅ Done. Rows scanned: '+rowsScanned+'. Rows with removals: '+rowsWithRemovals+'. Cells removed: '+cellsRemoved+'. DRY_RUN='+DRY_RUN)})();
